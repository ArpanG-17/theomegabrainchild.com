import React, { useEffect, useState, useRef } from "react"; import { FiShield, FiAlertCircle, FiSearch, FiMapPin, FiHeart } from "react-icons/fi";

export default function OmegaXBrainchildApp() { const [inputText, setInputText] = useState(''); const [scanResult, setScanResult] = useState(null); const [blockedUrls, setBlockedUrls] = useState(() => JSON.parse(localStorage.getItem('blockedUrls')||'[]')); const [mode, setMode] = useState('monitor'); const [location, setLocation] = useState(null); const [nearby, setNearby] = useState([]); const [alerts, setAlerts] = useState([]); const [settings, setSettings] = useState(() => JSON.parse(localStorage.getItem('settings')||JSON.stringify({shareAnonymized:false, localOnly:true}))); const scanRef = useRef(null);

const SAFETY_HUBS = [ { id:1, name:'Central Police Station', lat:22.5726, lon:88.3639, phone:'+91-33-00000000' }, { id:2, name:"Women's Helpline Shelter", lat:22.5732, lon:88.3700, phone:'+91-33-11111111' }, { id:3, name:'City Hospital Emergency', lat:22.5750, lon:88.3600, phone:'‪+91-33-22222222‬' }, { id:4, name:'Community Support Center', lat:22.5680, lon:88.3650, phone:'‪+91-33-33333333‬' } ];

useEffect(()=>{ localStorage.setItem('blockedUrls', JSON.stringify(blockedUrls)); },[blockedUrls]); useEffect(()=>{ localStorage.setItem('settings', JSON.stringify(settings)); },[settings]);

function simpleThreatScan(text){ const lowered = text.toLowerCase(); const alerts = []; const dangerWords = ['help','danger','stalking','assault','rape','hurt','follow','threat']; if (dangerWords.some(w=>lowered.includes(w))) alerts.push({level:'critical', tag:'physical_safety', msg:'Message suggests physical danger.'}); const scamWords = ['bank','account','password','ssn','verify','otp','click','login','update','confirm']; if (scamWords.some(w=>lowered.includes(w))) alerts.push({level:'high', tag:'phishing', msg:'Possible phishing attempt detected.'}); const urlRegex = /(https?://[^\s]+)/g; const urls = text.match(urlRegex) || []; urls.forEach(u=>{ if (isUrlSuspicious(u)) alerts.push({level:'high', tag:'malware_url', msg:Suspicious URL detected: ${u}}); }); const abusive = ['idiot','bitch','slut','whore','harass','threaten']; if (abusive.some(w=>lowered.includes(w))) alerts.push({level:'medium', tag:'abuse', msg:'Language suggests harassment or abuse.'}); const severity = alerts.some(a=>a.level==='critical') ? 'critical' : (alerts.some(a=>a.level==='high') ? 'high' : (alerts.length? 'medium' : 'safe')); return { severity, alerts, urls }; }

function isUrlSuspicious(url){ try{ const parsed = new URL(url); const host = parsed.hostname; const suspiciousTLDs = ['.xyz','.party','.top','.ru','.cn']; if (suspiciousTLDs.some(t=>host.endsWith(t))) return true; if (/^\d+.\d+.\d+.\d+$/.test(host)) return true; if (url.length > 150) return true; if (/login|verify|confirm|secure|update|account/.test(parsed.pathname+parsed.search)) return true; return false; }catch(e){return true} }

function runScan(){ const r = simpleThreatScan(inputText); setScanResult(r); setAlerts(r.alerts); if (settings.localOnly && r.urls.length){ const toBlock = r.urls.filter(u=>isUrlSuspicious(u)); if (toBlock.length){ setBlockedUrls(prev=>Array.from(new Set([...prev, ...toBlock]))); } } }

useEffect(()=>{ clearTimeout(scanRef.current); scanRef.current = setTimeout(()=>{ if (inputText.trim()) runScan(); else { setScanResult(null); setAlerts([]); } }, 450); return ()=>clearTimeout(scanRef.current); },[inputText]);

useEffect(()=>{ if (navigator.geolocation){ navigator.geolocation.getCurrentPosition(p=>{ const {latitude, longitude} = p.coords; setLocation({lat:latitude, lon:longitude}); findNearby(latitude, longitude); }, ()=>{}); } },[]);

function haversine(lat1,lon1,lat2,lon2){ const R = 6371; const toRad = x=>x*Math.PI/180; const dLat = toRad(lat2-lat1); const dLon = toRad(lon2-lon1); const a = Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(toRad(lat1))*Math.cos(toRad(lat2))Math.sin(dLon/2)Math.sin(dLon/2); const c = 2Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); return Rc; }

function findNearby(lat, lon){ const list = SAFETY_HUBS.map(h=>({...h, dist: haversine(lat, lon, h.lat, h.lon)})).sort((a,b)=>a.dist-b.dist); setNearby(list.slice(0,5)); }

function manualFindNearby(){ const lat = parseFloat(prompt('Enter latitude')); const lon = parseFloat(prompt('Enter longitude')); if (!isNaN(lat)&&!isNaN(lon)){ setLocation({lat,lon}); findNearby(lat,lon); } }

function callHub(h){ window.open(tel:${h.phone.replace(/\s/g,'')},'_self'); }

function removeBlocked(u){ setBlockedUrls(prev=>prev.filter(x=>x!==u)); }

function toggleSetting(k){ setSettings(s=> ({...s, [k]: !s[k]})); }

return ( <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white p-6 font-sans"> <header className="max-w-4xl mx-auto mb-6"> <div className="flex items-center justify-between"> <div className="flex items-center gap-3"> <div className="rounded-full bg-indigo-600 text-white p-3 shadow-lg"><FiShield/></div> <div> <h1 className="text-2xl font-semibold">OmegaX Brainchild</h1> <p className="text-sm text-slate-600">AI tool for digital safety and emergency support</p> </div> </div> <div className="text-sm text-slate-500">Mode: <strong>{mode}</strong></div> </div> </header> <main className="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6"> <section className="md:col-span-2 bg-white rounded-2xl shadow-md p-5"> <h2 className="font-semibold text-lg mb-3">Live Interaction Scanner</h2> <textarea placeholder="Paste suspicious content here..." value={inputText} onChange={e=>setInputText(e.target.value)} className="w-full h-40 p-3 border rounded-md text-sm" /> <div className="flex items-center gap-3 mt-3"> <button onClick={runScan} className="px-4 py-2 bg-indigo-600 text-white rounded-md">Run Scan</button> <button onClick={()=>{ setInputText(''); setScanResult(null); setAlerts([]); }} className="px-3 py-2 border rounded-md">Clear</button> <div className="ml-auto text-xs text-slate-500">Local-only mode: <strong>{settings.localOnly? 'ON':'OFF'}</strong></div> </div> <div className="mt-4"> <h3 className="text-sm font-medium">Scan Summary</h3> {!scanResult && <p className="text-sm text-slate-500">No scan performed yet.</p>} {scanResult && ( <div className="mt-2"> <div className={inline-block px-3 py-1 rounded-full text-white text-xs ${scanResult.severity==='critical'? 'bg-red-600' : scanResult.severity==='high'? 'bg-amber-600' : scanResult.severity==='medium'? 'bg-sky-600' : 'bg-green-600'}}>{scanResult.severity.toUpperCase()}</div> <ul className="mt-2 space-y-2"> {scanResult.alerts.map((a,i)=>( <li key={i} className="p-2 border rounded-md bg-slate-50 flex items-start gap-3"> <FiAlertCircle className="mt-1 text-amber-700"/> <div> <div className="text-sm font-medium">{a.tag.replace('_',' ').toUpperCase()}</div> <div className="text-xs text-slate-600">{a.msg}</div> </div> </li> ))} </ul> {scanResult.urls.length>0 && ( <div className="mt-3"> <h4 className="text-xs font-semibold">Detected URLs</h4> <ul className="mt-1 text-sm"> {scanResult.urls.map((u,i)=>( <li key={i} className="flex items-center gap-3"> <a href={u} target="_blank" rel="noreferrer" className="underline text-indigo-600 text-sm truncate max-w-[420px]">{u}</a> <button onClick={()=>setBlockedUrls(p=>Array.from(new Set([...p,u])))} className="text-xs px-2 py-1 border rounded">Block</button> </li> ))} </ul> </div> )} </div> )} </div> </section> <aside className="bg-white rounded-2xl shadow-md p-4"> <div> <h3 className="text-sm font-medium flex items-center gap-2"><FiMapPin/> Safety Hub</h3> <ul className="mt-2 text-sm space-y-2"> {nearby.length===0 && <li className="text-xs text-slate-500">No location detected yet.</li>} {nearby.map(h=>( <li key={h.id} className="p-2 border rounded-md flex justify-between items-start"> <div> <div className="font-medium">{h.name}</div> <div className="text-xs text-slate-500">{h.dist.toFixed(2)} km away</div> <div className="text-xs text-slate-500">{h.phone}</div> </div> <div className="flex flex-col gap-2"> <button onClick={()=>callHub(h)} className="px-2 py-1 bg-rose-600 text-white rounded text-xs">Call</button> <button onClick={()=>{navigator.clipboard.writeText(${h.name} - ${h.phone}); alert('Copied contact');}} className="px-
